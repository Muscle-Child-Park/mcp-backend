name: CD

on:
  push:
    branches:
      - main

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

  steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('/.gradle', '/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # CD
    - name: Make application-prod.yml
      run: |
        cd ./src/main/resources
        touch ./application-prod.yml
        echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
      shell: bash

    - name: Create 'generated-snippets' Directory
      run: mkdir -p build/generated-snippets

    - name: Build With Gradle
      run: ./gradlew build -x test

    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    #도커 빌드 & 이미지 push
    - name: Docker build & Push
      run: |
        docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker buildx create --use
        docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_REPO }} --push .
    #        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }} .
    #        docker push ${{ secrets.DOCKER_REPO }}

    #docker-compose 파일을 ec2 서버에 배포
    - name: Deploy to Prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        envs: GITHUB_SHA
        script: |
          docker stop mcpark
          docker rm mcpark
          sudo docker pull ${{ secrets.DOCKER_REPO }}
          docker run -d --name mcpark -p 8000:8000 ${{ secrets.DOCKER_REPO }}
          docker rmi -f $(docker images -f "dangling=true" -q)